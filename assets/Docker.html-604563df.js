import{_ as r,W as i,X as d,Y as l,Z as e,$ as a,a0 as t,a1 as s,C as c}from"./framework-a4c02b8f.js";const o="/assets/image-20230410110901256-f9d70709.png",p="/assets/image-20230410113714968-0f0beb5f.png",u="/assets/image-20230410114815274-2eea6aa5.png",h="/assets/image-20230410114957865-1da7f1fd.png",m="/assets/image-20230410120945285-a9392186.png",v="/assets/image-20230410123313283-86aa1bff.png",g="/assets/image-20230410123351163-3b223df2.png",k="/assets/image-20230410123412038-d5cf66e5.png",b="/assets/image-20230410125445167-2f1d2f79.png",x="/assets/image-20230410170907222-62cfaa92.png",f="/assets/image-20230410171001678-b8bd91c8.png",y="/assets/image-20230410171109388-b39c9e21.png",_="/assets/image-20230410181108116-d39aeeb7.png",D="/assets/image-20230410183153579-d6f8ac3f.png",I={},q=e("h1",{id:"docker学习笔记",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docker学习笔记","aria-hidden":"true"},"#"),a(" Docker学习笔记")],-1),N=e("h2",{id:"相关网站",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#相关网站","aria-hidden":"true"},"#"),a(" 相关网站")],-1),P={href:"http://docker.p2hp.com/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.bilibili.com/video/BV1gr4y1U7CY/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://docs.docker.com/engine/install/centos/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors",target:"_blank",rel:"noopener noreferrer"},E={href:"https://cr.console.aliyun.com/cn-hangzhou/instance/dashboard",target:"_blank",rel:"noopener noreferrer"},S={href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://www.portainer.io/",target:"_blank",rel:"noopener noreferrer"},U={href:"https://docs.portainer.io/start/install-ce/server/docker/linux",target:"_blank",rel:"noopener noreferrer"},z=s(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>Docker是基于Go语言实现的云开源项目，能实现只需要一次配置环境，换到别的机子上就可以一键部署好，大大的简化了操作。也就是<strong>一次镜像，处处运行</strong>。</p><p>解决了运行环境和配置问题的软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。</p><h3 id="基本组成" tabindex="-1"><a class="header-anchor" href="#基本组成" aria-hidden="true">#</a> 基本组成</h3><ol><li>镜像：类似于java中的类；是一个只读模版，用来常见Docker容器，一个镜像可以创建多个容器。</li><li>容器：类似于java中的对象；容器是用镜像创建的运行实例，每个容器都是相互隔离的、保证安全的。</li><li>仓库：类似于java中的maven仓库；存储docker镜像的地方，仓库分为共有和私有。</li></ol><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><h3 id="卸载旧版本" tabindex="-1"><a class="header-anchor" href="#卸载旧版本" aria-hidden="true">#</a> 卸载旧版本</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo yum remove docker \\
                  docker-client \\
                  docker-client-latest \\
                  docker-common \\
                  docker-latest \\
                  docker-latest-logrotate \\
                  docker-logrotate \\
                  docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装-yum-util并设置仓库地址" tabindex="-1"><a class="header-anchor" href="#安装-yum-util并设置仓库地址" aria-hidden="true">#</a> 安装 yum-util并设置仓库地址</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo yum install -y yum-utils
sudo yum-config-manager \\
    --add-repo \\
    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
# 更新yum软件包索引
yum makecache fast(centos8 没有fast参数，去掉即可)
yum makecache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装docker-engine" tabindex="-1"><a class="header-anchor" href="#安装docker-engine" aria-hidden="true">#</a> 安装Docker Engine</h3><p>安装最新版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装指定版本</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum list docker-ce --showduplicates | sort -r
 
sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io docker-buildx-plugin docker-compose-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动docker" tabindex="-1"><a class="header-anchor" href="#启动docker" aria-hidden="true">#</a> 启动Docker</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo systemctl start docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证docker安装成功" tabindex="-1"><a class="header-anchor" href="#验证docker安装成功" aria-hidden="true">#</a> 验证Docker安装成功</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo docker version
sudo docker run hello-world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="卸载" tabindex="-1"><a class="header-anchor" href="#卸载" aria-hidden="true">#</a> 卸载</h2><h3 id="卸载docker" tabindex="-1"><a class="header-anchor" href="#卸载docker" aria-hidden="true">#</a> 卸载Docker</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo systemctl stop docker
yum remove docker-ce docker-ce-cli containerd.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除资源" tabindex="-1"><a class="header-anchor" href="#删除资源" aria-hidden="true">#</a> 删除资源</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rm -rf /var/lib/docker
rm -rf /var/lib/containerd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="镜像加速器配置-阿里云" tabindex="-1"><a class="header-anchor" href="#镜像加速器配置-阿里云" aria-hidden="true">#</a> 镜像加速器配置(阿里云)</h2>`,25),B={href:"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors",target:"_blank",rel:"noopener noreferrer"},G=s('<img src="'+o+'" alt="阿里云镜像加速" style="zoom:50%;"><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><h3 id="帮助启动类命令" tabindex="-1"><a class="header-anchor" href="#帮助启动类命令" aria-hidden="true">#</a> 帮助启动类命令</h3><table><thead><tr><th style="text-align:center;">功能</th><th style="text-align:center;">命令</th></tr></thead><tbody><tr><td style="text-align:center;">启动Docker</td><td style="text-align:center;">systemctl start docker</td></tr><tr><td style="text-align:center;">停止Docker</td><td style="text-align:center;">systemctl stop docker</td></tr><tr><td style="text-align:center;">重启Docker</td><td style="text-align:center;">systemctl restart docker</td></tr><tr><td style="text-align:center;">查看Docker状态</td><td style="text-align:center;">systemctl status docker</td></tr><tr><td style="text-align:center;">开机启动</td><td style="text-align:center;">systemctl enable docker</td></tr><tr><td style="text-align:center;">查看Docker概要信息</td><td style="text-align:center;">docker info</td></tr><tr><td style="text-align:center;">查看Docker总体帮助文档</td><td style="text-align:center;">docker --help</td></tr><tr><td style="text-align:center;">查看Docker命令帮助文档</td><td style="text-align:center;">docker 具体命令 --help</td></tr></tbody></table><h3 id="镜像命令" tabindex="-1"><a class="header-anchor" href="#镜像命令" aria-hidden="true">#</a> 镜像命令</h3><table><thead><tr><th style="text-align:center;">功能</th><th style="text-align:center;">命令</th></tr></thead><tbody><tr><td style="text-align:center;">查看本地主机上的镜像</td><td style="text-align:center;">docker images -a*(列出本地所有镜像，包含历史镜像)* -q*(只显示镜像ID)*</td></tr><tr><td style="text-align:center;">搜索镜像</td><td style="text-align:center;">docker search [镜像名称] --limit [数量] <em>(展示条数)</em></td></tr><tr><td style="text-align:center;">拉取镜像</td><td style="text-align:center;">docker pull [镜像名字[:TAG]] <em>(不加tag就是拉取最新的)</em></td></tr><tr><td style="text-align:center;">查看镜像/容器/数据卷所占的空间</td><td style="text-align:center;">docker system df</td></tr><tr><td style="text-align:center;">删除某个或多个镜像</td><td style="text-align:center;">docker rmi [-f <em>(强制删除)</em> ] [镜像ID/镜像名称:TAG] [镜像ID/镜像名称:TAG] ...</td></tr><tr><td style="text-align:center;">删除所有镜像</td><td style="text-align:center;">docker rmi -f $(docker images -qa)</td></tr></tbody></table><h3 id="容器命令" tabindex="-1"><a class="header-anchor" href="#容器命令" aria-hidden="true">#</a> 容器命令</h3><table><thead><tr><th style="text-align:center;">功能</th><th style="text-align:center;">命令</th></tr></thead><tbody><tr><td style="text-align:center;">新建+启动容器</td><td style="text-align:center;">docker run [OPTIONS] 镜像名称 [COMMAND] [ARG...]<img src="'+p+'" alt="image-20230410113714968" loading="lazy"></td></tr><tr><td style="text-align:center;">列出当前所有正在运行的容器</td><td style="text-align:center;">docker ps [OPTIONS]<img src="'+u+'" alt="image-20230410114815274" style="zoom:50%;"></td></tr><tr><td style="text-align:center;">退出容器</td><td style="text-align:center;"><img src="'+h+'" alt="image-20230410114957865" style="zoom:50%;"></td></tr><tr><td style="text-align:center;">启动已停止运行的容器</td><td style="text-align:center;">docker start 容器ID或者容器名字</td></tr><tr><td style="text-align:center;">重启容器</td><td style="text-align:center;">docker restart 容器ID或者容器名字</td></tr><tr><td style="text-align:center;">停止容器</td><td style="text-align:center;">docker stop 容器ID或者容器名字</td></tr><tr><td style="text-align:center;">强制停止容器</td><td style="text-align:center;">docker kill 容器ID或者容器名字</td></tr><tr><td style="text-align:center;">删除已停止容器</td><td style="text-align:center;">docker rm [-f] 容器ID或者容器名字</td></tr></tbody></table><h3 id="重要指令" tabindex="-1"><a class="header-anchor" href="#重要指令" aria-hidden="true">#</a> 重要指令</h3><table><thead><tr><th style="text-align:center;">功能</th><th style="text-align:center;">命令</th></tr></thead><tbody><tr><td style="text-align:center;">查看容器日志</td><td style="text-align:center;">docker log [-f(实时查看)] 容器ID/容器名称</td></tr><tr><td style="text-align:center;">查看容器内运行的进程</td><td style="text-align:center;">docker top 容器ID/容器名称</td></tr><tr><td style="text-align:center;">查看容器内部细节</td><td style="text-align:center;">docker inspect 容器ID/容器名称</td></tr><tr><td style="text-align:center;">进入正在运行的容器并以命令行交互</td><td style="text-align:center;">docker exec -it 容器ID /bin/bash</td></tr><tr><td style="text-align:center;">从容器内拷贝文件到主机上</td><td style="text-align:center;">docker cp 容器ID:容器路径 本机路径</td></tr><tr><td style="text-align:center;">导入和导出容器</td><td style="text-align:center;">cat 文件名.tar | docker import -镜像用户/镜像名:镜像版本号/docker export 容器ID &gt; 文件名.tar<img src="'+m+`" alt="导入和导出容器" loading="lazy"></td></tr></tbody></table><h2 id="构建自己的镜像" tabindex="-1"><a class="header-anchor" href="#构建自己的镜像" aria-hidden="true">#</a> 构建自己的镜像</h2><h3 id="启动ubuntu容器" tabindex="-1"><a class="header-anchor" href="#启动ubuntu容器" aria-hidden="true">#</a> 启动ubuntu容器</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -it ubuntu /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="添加vim" tabindex="-1"><a class="header-anchor" href="#添加vim" aria-hidden="true">#</a> 添加vim</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>apt update
apt install vim
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建含有vim功能的ubuntu的镜像" tabindex="-1"><a class="header-anchor" href="#创建含有vim功能的ubuntu的镜像" aria-hidden="true">#</a> 创建含有vim功能的ubuntu的镜像</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker commit -m=&quot;带有vim功能的ubuntu&quot; -a=&quot;xxx&quot; 容器ID 镜像名称[:版本号]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="本地镜像发布到阿里云" tabindex="-1"><a class="header-anchor" href="#本地镜像发布到阿里云" aria-hidden="true">#</a> 本地镜像发布到阿里云</h2>`,18),M={href:"https://cr.console.aliyun.com/cn-hangzhou/instance/dashboard",target:"_blank",rel:"noopener noreferrer"},L=s('<h3 id="创建命名空间" tabindex="-1"><a class="header-anchor" href="#创建命名空间" aria-hidden="true">#</a> 创建命名空间</h3><figure><img src="'+v+'" alt="image-20230410123313283" tabindex="0" loading="lazy"><figcaption>image-20230410123313283</figcaption></figure><h3 id="创建仓库" tabindex="-1"><a class="header-anchor" href="#创建仓库" aria-hidden="true">#</a> 创建仓库</h3><img src="'+g+'" alt="image-20230410123351163" style="zoom:50%;"><figure><img src="'+k+`" alt="image-20230410123412038" tabindex="0" loading="lazy"><figcaption>image-20230410123412038</figcaption></figure><p>之后按照阿里云提示的命令进行操作</p><h2 id="私有库安装-本地镜像推送到私有库" tabindex="-1"><a class="header-anchor" href="#私有库安装-本地镜像推送到私有库" aria-hidden="true">#</a> 私有库安装&amp;本地镜像推送到私有库</h2><h3 id="下载docker-registry镜像" tabindex="-1"><a class="header-anchor" href="#下载docker-registry镜像" aria-hidden="true">#</a> 下载Docker Registry镜像</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="运行镜像" tabindex="-1"><a class="header-anchor" href="#运行镜像" aria-hidden="true">#</a> 运行镜像</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -d -p 5000:5000 -v /root/myregistry:/tmp/registry --privileged=true registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="设置私有库支持http" tabindex="-1"><a class="header-anchor" href="#设置私有库支持http" aria-hidden="true">#</a> 设置私有库支持http</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cat /etc/docker/daemon.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新增如下配置:</p><img src="`+b+`" alt="image-20230410125445167" style="zoom:50%;"><h3 id="查看私有库的镜像列表" tabindex="-1"><a class="header-anchor" href="#查看私有库的镜像列表" aria-hidden="true">#</a> 查看私有库的镜像列表</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -XGET http://localhost:5000/v2/_catalog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="推送本地镜像到私有库" tabindex="-1"><a class="header-anchor" href="#推送本地镜像到私有库" aria-hidden="true">#</a> 推送本地镜像到私有库</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag localhost/vim-ubuntu localhost:5000/vim-ubuntu
<span class="token function">docker</span> push localhost:5000/vim-ubuntu:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="容器数据卷" tabindex="-1"><a class="header-anchor" href="#容器数据卷" aria-hidden="true">#</a> 容器数据卷</h2><h3 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点</h3><ul><li>在命令后面建议加上–privileged=true，解决CentOS系统中cannot open directory.：Permission denied 问题</li></ul><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h3><p>主要是将容器内的数据保存在宿主机中，即使容器停止或者删除，容器卷映射的目录也还是存在</p><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h3><ul><li>数据卷可在容器之间共享或重用数据</li><li>卷中的更改可以直接实时生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的声明周期一直持续到没有容器使用它位置</li></ul><h3 id="挂载命令" tabindex="-1"><a class="header-anchor" href="#挂载命令" aria-hidden="true">#</a> 挂载命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> 宿主机目录:容器目录:ro<span class="token punctuation">(</span>默认是rw，有读写权限<span class="token punctuation">)</span> 容器ID/容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="容器卷的继承" tabindex="-1"><a class="header-anchor" href="#容器卷的继承" aria-hidden="true">#</a> 容器卷的继承</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true --volumes-from 父容器ID 容器ID/容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="安装常用软件" tabindex="-1"><a class="header-anchor" href="#安装常用软件" aria-hidden="true">#</a> 安装常用软件</h2><h3 id="tomcat" tabindex="-1"><a class="header-anchor" href="#tomcat" aria-hidden="true">#</a> Tomcat</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search tomcat
<span class="token function">docker</span> pull tomcat
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">--name</span><span class="token operator">=</span>tomcat tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx" aria-hidden="true">#</a> nginx</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run --name nginx \\
  -v /root/custom_data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro \\
  --privileged=true \\
  -d \\
  nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> Mysql</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /root/custom_data/mysql/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /root/custom_data/mysql/data:/var/log/mysql <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /root/custom_data/mysql/log:/var/lib/mysql <span class="token punctuation">\\</span>
  <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> mysql  <span class="token punctuation">\\</span>
  mysql <span class="token punctuation">\\</span>
  --character-set-server<span class="token operator">=</span>utf8mb4 --collation-server<span class="token operator">=</span>utf8mb4_unicode_ci
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> redis</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run \\
    -v /root/custom_data/redis/conf:/usr/local/etc/redis \\
    -v /root/custom_data/redis/data:/data \\
    -d \\
    --name redis \\
    --privileged=true \\
    redis \\
    redis-server /usr/local/etc/redis/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="分布式存储解决方案" tabindex="-1"><a class="header-anchor" href="#分布式存储解决方案" aria-hidden="true">#</a> 分布式存储解决方案</h4><ol><li>Hash取余分区：缺点是如果一台redis挂了或者扩容缩容，那么hash(key) % redis机器台数 计算出来的值就会发生很大变化</li><li>一致性哈希算法分区：缺点是如果节点太少，容易因为节点分布不均匀而造成数据倾斜的问题(被缓存的对象大部分落在同一台主机上)</li><li>哈希槽分区</li></ol><h2 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile" aria-hidden="true">#</a> Dockerfile</h2>`,42),X={href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"},V=s(`<h3 id="简介-1" tabindex="-1"><a class="header-anchor" href="#简介-1" aria-hidden="true">#</a> 简介</h3><p>Dockerfile是用来构建镜像的一个文本文件，是由一条条构建镜像所需的指令和参数构成的脚本</p><h3 id="构建步骤" tabindex="-1"><a class="header-anchor" href="#构建步骤" aria-hidden="true">#</a> 构建步骤</h3><ol><li>编写Dockerfile文件</li><li>docker build 命令构建镜像</li><li>docker run 镜像运行容器实例</li></ol><h3 id="构建过程" tabindex="-1"><a class="header-anchor" href="#构建过程" aria-hidden="true">#</a> 构建过程</h3><h4 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识" aria-hidden="true">#</a> 基础知识</h4><ol><li>每条保留字指令都<strong>必须为大写字母</strong>且后面要跟随至少一个参数</li><li>指令按照从上到下，顺序执行</li><li>#表示注释</li><li>每条指令都会创建一个新的镜像层并对镜像进行提交</li></ol><h4 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程" aria-hidden="true">#</a> 执行流程</h4><ol><li>docker 从基础镜像运行一个容器</li><li>执行一条指令并对容器做出修改</li><li>执行类似docker commit的操作提交一个新的镜像层</li><li>docker 再基于刚提交的净吸纳过运行一个新容器</li><li>执行dockerfile中的下一条指令直到左右的指令都执行完成</li></ol><h3 id="常用保留字" tabindex="-1"><a class="header-anchor" href="#常用保留字" aria-hidden="true">#</a> 常用保留字</h3><ul><li><p>FROM</p><p>基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模版，第一条必须是FROM</p></li><li><p>MAINTAINER</p><p>镜像维护者的姓名和邮箱地址</p></li><li><p>RUN</p><p>容器构建时需要运行的命令，是在docker build 时运行 ，分为两种:</p><p>​ shell 格式 ： 类似于在终端bash中运行的命令，例如： RUN yum -y install vim</p><p>​ exec 格式 ： RUN [&quot;可执行文件&quot;,&quot;参数1&quot;, “参数2”] ， 例如: RUN [&quot;./test.php&quot;, “dev”, “offline”] 等价于 RUN ./test.php dev offline</p></li><li><p>EXPOSE</p><p>当前容器对外暴露的端口</p></li><li><p>WORKDIR</p><p>指定在创建容器后，终端默认登录的进来工作目录，一个落脚点</p></li><li><p>USER</p><p>指定该镜像以什么样的用户去执行，如果不指定，默认为root</p></li><li><p>ENV</p><p>用来在构建过程中设置环境变量，这个环境变量可以在后续的任何RUN指令中使用，引用方式 $XXX</p></li><li><p>ADD</p><p>将宿主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包</p></li><li><p>COPY</p><p>类似ADD，但是没有自动解压功能，将宿主机中的数据拷贝到镜像中，COPY src dest / COPY [&quot;src&quot;, “dest”]</p></li><li><p>VOLUME</p><p>容器数据卷，用于数据保存和持久化工作</p></li><li><p>CMD</p><p>指定容器启动后要执行的命令，是在docker run 时运行， 和RUN 语法一样，如果一个文件有多个CMD 命令，那么只执行最后一个，并且会被docker run 命令 [参数] 最后的参数给替换</p></li><li><p>ENTRYPOINT</p><p>用来指定一个容器启动时要运行的命令，类似于CMD命令，但是ENTRYPOINT不会被docker run 后面的命令覆盖，而且这些命令行参数会被当做参数送给ENTRYPOINT指令指定的程序。</p></li></ul><h2 id="虚悬镜像" tabindex="-1"><a class="header-anchor" href="#虚悬镜像" aria-hidden="true">#</a> 虚悬镜像</h2><p>仓库名和tag名都为&lt;none&gt; 的镜像</p><h3 id="查询虚悬镜像" tabindex="-1"><a class="header-anchor" href="#查询虚悬镜像" aria-hidden="true">#</a> 查询虚悬镜像</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker image ls -f dangling=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除虚悬镜像" tabindex="-1"><a class="header-anchor" href="#删除虚悬镜像" aria-hidden="true">#</a> 删除虚悬镜像</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker image prune
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="docker网络" tabindex="-1"><a class="header-anchor" href="#docker网络" aria-hidden="true">#</a> Docker网络</h2><p>docker 启动后会有一个docker0 的网络</p><figure><img src="`+x+'" alt="image-20230410170907222" tabindex="0" loading="lazy"><figcaption>image-20230410170907222</figcaption></figure><p>当安装docker 后，会默认安装3个网络模式</p><figure><img src="'+f+`" alt="image-20230410171001678" tabindex="0" loading="lazy"><figcaption>image-20230410171001678</figcaption></figure><h3 id="相关命令" tabindex="-1"><a class="header-anchor" href="#相关命令" aria-hidden="true">#</a> 相关命令</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker network [OPTIONS]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+y+'" alt="image-20230410171109388" style="zoom:50%;"><h3 id="作用-1" tabindex="-1"><a class="header-anchor" href="#作用-1" aria-hidden="true">#</a> 作用</h3><ol><li>容器间的互联和通信以及端口映射</li><li>容器IP变动时可以通过服务名直接网络通信而不受到IP变动的影响</li></ol><h3 id="网络模式的介绍" tabindex="-1"><a class="header-anchor" href="#网络模式的介绍" aria-hidden="true">#</a> 网络模式的介绍</h3><table><thead><tr><th>网络模式</th><th>简介</th></tr></thead><tbody><tr><td>bridge</td><td>为每一个容器分配、设置IP等，并将容器连接到一个<strong>docker0</strong>虚拟网桥，默认为该模式。<strong>使用--network bridge指定</strong></td></tr><tr><td>host</td><td>容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。<strong>使用 --network host 指定</strong></td></tr><tr><td>none</td><td>容器有独立的Netwok namespace，但并没有对其进行任何网络设置，如分配veth pair和网桥连接，IP等。<strong>使用--network none指定</strong></td></tr><tr><td>container</td><td>新创建的容器不会创建自己的网卡和配置自己的IP，而是和一个指定的容器共享IP、端口范围等。<strong>使用 --network container:NAME或者容器ID指定</strong></td></tr></tbody></table><h3 id="自定义网络" tabindex="-1"><a class="header-anchor" href="#自定义网络" aria-hidden="true">#</a> 自定义网络</h3><p>解决了只能用IP通信的问题，可以用服务名通信，如下步骤实现：</p><ol><li>创建自定义网络 docker network create customer_network</li><li>新建容器加入自定义网络; docker run --network customer_network 容器名</li></ol><h2 id="docker-compose-容器编排" tabindex="-1"><a class="header-anchor" href="#docker-compose-容器编排" aria-hidden="true">#</a> Docker-compose 容器编排</h2>',33),Y={href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"},F=s(`<p>是Docker 是官方的开源项目，实现对Docker容器集群的快速编排。编写一个docker-compose.yml文件，在其中定义各个容器的关系，就可以用一条指令来一键启动或者关闭这些容器。</p><h3 id="安装-1" tabindex="-1"><a class="header-anchor" href="#安装-1" aria-hidden="true">#</a> 安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-SL</span> https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-linux-x86_64 <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
<span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/bin/docker-compose /usr/bin/docker-compose
<span class="token comment">#测试是否安装成功</span>
<span class="token function">docker</span> compose version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="compose核心概念" tabindex="-1"><a class="header-anchor" href="#compose核心概念" aria-hidden="true">#</a> compose核心概念</h3><ul><li><p>一文件: docker-compose.yml</p></li><li><p>两要素:</p></li></ul><p>​ 服务：一个个应用容器实例，比如订单微服务，mysql容器，redis等</p><p>​ 工程：由一组关联的应用容器组成的一个<strong>完整业务单元</strong>，在docker-compose.yml文件中定义</p><h3 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h3><ol><li>编写Dockerfile定义各个微服务应用并构建出对应的镜像文件</li><li>使用docker-compose.yml定义一个完整业务单元，安排好整体应用中的各个容器服务。</li><li>最后，执行docker-compose up命令来启动并运行整个应用程序，完成一键部署上线</li></ol><h3 id="常用命令-1" tabindex="-1"><a class="header-anchor" href="#常用命令-1" aria-hidden="true">#</a> 常用命令</h3><figure><img src="`+_+'" alt="image-20230410181108116" tabindex="0" loading="lazy"><figcaption>image-20230410181108116</figcaption></figure><h2 id="portainer可视化工具" tabindex="-1"><a class="header-anchor" href="#portainer可视化工具" aria-hidden="true">#</a> Portainer可视化工具</h2>',12),H={href:"https://www.portainer.io/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://docs.portainer.io/start/install-ce/server/docker/linux",target:"_blank",rel:"noopener noreferrer"},W=s(`<h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><p>Portainer是一个可视化docker操作工具，可以不用写docker命令实现容器的生命周期进行管理，方便的实现容器的创建、运行、停止、暂停、恢复、删除、复制等。</p><h4 id="安装-2" tabindex="-1"><a class="header-anchor" href="#安装-2" aria-hidden="true">#</a> 安装</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="docker容器监控cig-cadvisor-influxdb-granfana" tabindex="-1"><a class="header-anchor" href="#docker容器监控cig-cadvisor-influxdb-granfana" aria-hidden="true">#</a> Docker容器监控CIG(CAdvisor+InfluxDB+Granfana)</h2><figure><img src="`+D+`" alt="image-20230410183153579" tabindex="0" loading="lazy"><figcaption>image-20230410183153579</figcaption></figure><h3 id="cadvisor" tabindex="-1"><a class="header-anchor" href="#cadvisor" aria-hidden="true">#</a> CAdvisor</h3><p>CAdvisor 是一个容器资源监控工具，包括容器的内存，CPU，网络IO，磁盘IO等监控，同时提供了一个web页面用于查看容器的实施运行状态。CAdvisor默认存储2分钟的数据，而且只是针对单物理机。不过CAdvisor提供了很多数据集成接口，支持InfluxDB,Redis,Kafka，ES等集成，可以加上对应配置将监控数据发往这些数据库存储起来</p><p>主要功能：</p><pre><code>- 展示Host和容器两个层次的监控数据
- 展示历史变化数据
</code></pre><h3 id="influxdb" tabindex="-1"><a class="header-anchor" href="#influxdb" aria-hidden="true">#</a> InfluxDB</h3><p>是用Go语言编写的一个开源分布式时序、事件和指标数据库，无需外部依赖。</p><p>主要功能：</p><pre><code>- 基于时间序列，支持与时间有关的相关函数(如最大、最小、求和等)
- 可度量性： 你可以实时对大量数据进行计算
- 基于事件： 它支持任意的时间数据
</code></pre><h3 id="granfana" tabindex="-1"><a class="header-anchor" href="#granfana" aria-hidden="true">#</a> Granfana</h3><p>是一个开源的数据监控分析可视化平台，支持多种数据源配置和丰富的插件及末班功能，支持图标权限控制和报警。</p><p>主要特性：</p><pre><code>- 灵活丰富的图形化选项
- 可以混合多种风格
- 支持白天和夜间模式
- 多个数据源
</code></pre><h3 id="使用docker-compose安装cig" tabindex="-1"><a class="header-anchor" href="#使用docker-compose安装cig" aria-hidden="true">#</a> 使用docker-compose安装CIG</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.1&#39;</span>
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">grafana_data</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
 <span class="token key atrule">influxdb</span><span class="token punctuation">:</span>
   <span class="token key atrule">image</span><span class="token punctuation">:</span> tutum/influxdb<span class="token punctuation">:</span><span class="token number">0.9</span>
   <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
   <span class="token key atrule">environment</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> PRE_CREATE_DB=cadvisor
   <span class="token key atrule">ports</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> <span class="token string">&quot;8083:8083&quot;</span>
   <span class="token punctuation">-</span> <span class="token string">&quot;8086:8086&quot;</span>
   <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> ./data/influxdb<span class="token punctuation">:</span>/data
             
 <span class="token key atrule">cadvisor</span><span class="token punctuation">:</span>
   <span class="token key atrule">image</span><span class="token punctuation">:</span> google/cadvisor
   <span class="token key atrule">links</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> influxdb<span class="token punctuation">:</span>influxsrv
   <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>storage_driver=influxdb <span class="token punctuation">-</span>storage_driver_db=cadvisor <span class="token punctuation">-</span>storage_driver_host=influxsrv<span class="token punctuation">:</span><span class="token number">8086</span>
   <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
   <span class="token key atrule">ports</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> <span class="token string">&quot;8080:8080&quot;</span>
   <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> /<span class="token punctuation">:</span>/rootfs<span class="token punctuation">:</span>ro
   <span class="token punctuation">-</span> /var/run<span class="token punctuation">:</span>/var/run<span class="token punctuation">:</span>rw
   <span class="token punctuation">-</span> /sys<span class="token punctuation">:</span>/sys<span class="token punctuation">:</span>ro
   <span class="token punctuation">-</span> /var/lib/docker/<span class="token punctuation">:</span>/var/lib/docker<span class="token punctuation">:</span>ro
 <span class="token key atrule">grafana</span><span class="token punctuation">:</span>
   <span class="token key atrule">user</span><span class="token punctuation">:</span> <span class="token string">&quot;104&quot;</span>
   <span class="token key atrule">image</span><span class="token punctuation">:</span> grafana/grafana
   <span class="token key atrule">user</span><span class="token punctuation">:</span> <span class="token string">&quot;104&quot;</span>
   <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
   <span class="token key atrule">links</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> influxdb<span class="token punctuation">:</span>influxsrv
   <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;3000:3000&quot;</span>
   <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> grafana_data<span class="token punctuation">:</span>/var/lib/grafana
   <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> HTTP_USER=admin
    <span class="token punctuation">-</span> HTTP_PASS=admin
    <span class="token punctuation">-</span> INFLUXDB_HOST=influxsrv
    <span class="token punctuation">-</span> INFLUXDB_PORT=8086
    <span class="token punctuation">-</span> INFLUXDB_NAME=cadvisor
    <span class="token punctuation">-</span> INFLUXDB_USER=root
    <span class="token punctuation">-</span> INFLUXDB_PASS=root

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20);function $(K,Q){const n=c("ExternalLinkIcon");return i(),d("div",null,[l(" more "),q,N,e("p",null,[e("a",P,[a("Docker中文官方网站"),t(n)])]),e("p",null,[e("a",R,[a("Docker仓库"),t(n)])]),e("p",null,[e("a",w,[a("尚硅谷Docker教学"),t(n)])]),e("p",null,[e("a",O,[a("CentOS安装DockerEngine"),t(n)])]),e("p",null,[e("a",T,[a("阿里云镜像加速器"),t(n)])]),e("p",null,[e("a",E,[a("阿里云镜像仓库地址"),t(n)])]),e("p",null,[e("a",S,[a("Dockerfile构建资料"),t(n)])]),e("p",null,[e("a",C,[a("Docker-compose官方资料"),t(n)])]),e("p",null,[e("a",A,[a("Portainer官网"),t(n)])]),e("p",null,[e("a",U,[a("Portainer安装文档"),t(n)])]),z,e("p",null,[e("a",B,[a("阿里云镜像加速配置"),t(n)])]),G,e("p",null,[e("a",M,[a("阿里云镜像仓库地址"),t(n)])]),L,e("p",null,[e("a",X,[a("Dockerfile构建资料"),t(n)])]),V,e("p",null,[e("a",Y,[a("Docker-compose官方资料"),t(n)])]),F,e("p",null,[e("a",H,[a("Portainer官网"),t(n)])]),e("p",null,[e("a",j,[a("Portainer安装文档"),t(n)])]),W])}const J=r(I,[["render",$],["__file","Docker.html.vue"]]);export{J as default};

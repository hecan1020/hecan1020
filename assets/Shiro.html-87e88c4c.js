import{_ as i,W as a,X as e,Y as r,a1 as s}from"./framework-a4c02b8f.js";const o="/assets/image-20230412203505966-a6a00ae4.png",n="/assets/image-20230412203743863-68b6420a.png",t="/assets/099e9d2055534c22b628553331cbac58-2f5c9101.png",l={},h=s('<h1 id="shiro学习笔记" tabindex="-1"><a class="header-anchor" href="#shiro学习笔记" aria-hidden="true">#</a> Shiro学习笔记</h1><h2 id="入门" tabindex="-1"><a class="header-anchor" href="#入门" aria-hidden="true">#</a> 入门</h2><h3 id="shiro介绍" tabindex="-1"><a class="header-anchor" href="#shiro介绍" aria-hidden="true">#</a> Shiro介绍</h3><p>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。</p><ol><li><p>shiro是apache的一个开源框架，是一个权限管理的框架，实现 用户认证、用户授权。</p></li><li><p>spring中有spring security (原名Acegi)，是一个权限框架，它和spring依赖过于紧密，没有shiro使用简单。</p></li><li><p>shiro不依赖于spring，shiro不仅可以实现 web应用的权限管理，还可以实现c/s系统，分布式系统权限管理，shiro属于轻量框架，越来越多企业项目开始使用shiro。</p></li></ol><h3 id="基本功能" tabindex="-1"><a class="header-anchor" href="#基本功能" aria-hidden="true">#</a> 基本功能</h3><figure><img src="'+o+'" alt="基本功能" tabindex="0" loading="lazy"><figcaption>基本功能</figcaption></figure><ul><li>Authentication ： 认证登录</li><li>Authorization： 授权、权限验证</li><li>Session Management： 会话管理</li><li>Cryptography： 加密</li><li>Web Support： web相关</li><li>Caching ： 缓存</li><li>Concurrency： 并发校验</li><li>Testing： 测试</li><li>Run As ： 看作什么角色</li><li>Remember Me： 记住</li></ul><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h3><p>从外部来看：</p><figure><img src="'+n+'" alt="原理图" tabindex="0" loading="lazy"><figcaption>原理图</figcaption></figure><ul><li>Subject ： 对象、用户</li><li>Shiro SecurityManager： 安全管理器</li><li>Realm ： 安全信息也可以看作数据源)</li></ul><p>从内部来看：</p><figure><img src="'+t+'" alt="架构图" tabindex="0" loading="lazy"><figcaption>架构图</figcaption></figure><ul><li><p><strong>subject</strong>：主体，可以是用户也可以是程序，主体要访问系统，系统需要对主体进行认证、授权。</p></li><li><p><strong>securityManager</strong>：安全管理器，主体进行认证和授权都是通过securityManager进行。securityManager是一个集合，真正做事的不是securityManager而是它里面的东西。</p></li><li><p><strong>authenticator</strong>：认证器，主体进行认证最终通过authenticator进行的。</p></li><li><p><strong>authorizer</strong>：授权器，主体进行授权最终通过authorizer进行的。</p></li><li><p><strong>sessionManager</strong>：web应用中一般是用web容器（中间件tomcat）对session进行管理，shiro也提供一套session管理的方式。shiro不仅仅可以用于web管理也可以用于cs管理，所以他不用web容器的session管理。</p></li><li><p><strong>SessionDao</strong>： 通过SessionDao管理session数据，针对个性化的session数据存储需要使用sessionDao（如果用tomcat管理session就不用SessionDao，如果要分布式的统一管理session就要用到SessionDao）。</p></li><li><p><strong>cache Manager</strong>：缓存管理器，主要对session和授权数据进行缓存（权限管理框架主要就是对认证和授权进行管理，session是在服务器缓存中的），比如将授权数据通过cacheManager进行缓存管理，和ehcache整合对缓存数据进行管理（redis是缓存框架）。</p></li><li><p><strong>realm</strong>：域，领域，相当于数据源，通过realm存取认证、授权相关数据（原来是通过数据库取的）。</p><p>注意：authenticator认证器和authorizer授权器调用realm中存储授权和认证的数据和逻辑。</p></li><li><p><strong>cryptography</strong>：密码管理，比如md5加密，提供了一套加密/解密的组件，方便开发。比如提供常用的散列、加/解密等功能。比如 md5散列算法（md5只有加密没有解密）。</p></li></ul><h2 id="与springboot整合" tabindex="-1"><a class="header-anchor" href="#与springboot整合" aria-hidden="true">#</a> 与SpringBoot整合</h2><h3 id="todo" tabindex="-1"><a class="header-anchor" href="#todo" aria-hidden="true">#</a> // todo</h3>',17);function c(p,g){return a(),e("div",null,[r(" more "),h])}const u=i(l,[["render",c],["__file","Shiro.html.vue"]]);export{u as default};
